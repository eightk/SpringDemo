<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation=
    "http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd" 
       xmlns:context="http://www.springframework.org/schema/context"
       default-init-method="myInit" default-destroy-method="cleanUp" xmlns:aop="http://www.springframework.org/schema/aop">    
    <!--to tell spring to find the aspects-->
    <aop:aspectj-autoproxy/>
    
    <!--autowire can use byType as well only when all the properties in different types so normally using byName, to make the bean name the same as the arg name-->
    <!--autowire constructor also work, have one bean per arg to make it work, but mostly not quite useful-->
    <!--define the scope of the bean in bean attribute, default is singleton-->
    <bean id="triangle" class="com.demo.drawing.Triangle" name="triangle-name" autowire="byName" scope="prototype" >
        <!--init collections but not normally use
        <property name="points">            
            <list>
                <ref bean="pa"/>
                <ref bean="ZeroPoint"/>            
                <ref bean="pc"/>
            </list>
        </property>  -->  
        <!-- init by constructor-arg using name
        <constructor-arg name="pa" ref="pa"/>
        <constructor-arg name="pb" ref="pb"/>
        <constructor-arg name="pc" ref="pc"/>-->
        <!-- init by constructor-arg using index
        <constructor-arg index="0" ref="pa"/>
        <constructor-arg index="1" ref="pb"/>
        <constructor-arg index="2" ref="pc"/>-->            
    </bean>   
    
    <bean id="zeroPoint" class="com.demo.drawing.Point">
        <property name="xaxis" value="0"/>
        <property name="yaxis" value="0"/>
    </bean>
    
    <bean id="pa" class="com.demo.drawing.Point">
        <property name="xaxis" value="${pointA.axisX}"/>
        <property name="yaxis" value="${pointA.axisY}"/>
    </bean>
    
    <bean id="pc" class="com.demo.drawing.Point">
        <property name="xaxis" value="10"/>
        <property name="yaxis" value="0"/>
    </bean>
    
    <bean id="pd" class="com.demo.drawing.Point">
        <!--qualifier value="circleRelated"/-->
        <property name="xaxis" value="20"/>
        <property name="yaxis" value="20"/>
    </bean>
        
    <bean id="square" class="com.demo.aop.model.Square">
        <property name="name" value="Test Square"/>
    </bean>
    <bean id="rectangle" class="com.demo.aop.model.Rectangle">
        <property name="name" value="Test Rectangle"/>
    </bean>
        
    <bean name="shapeService" class="com.demo.service.ShapeService" autowire="byName"/>
    <bean name="loggingAspect" class="com.demo.aop.aspect.LoggingAspect"/>
    
    <!--alias for autowiring-->
    <alias name="zeroPoint" alias="pb"/>
    
    <!--the BeanPostProcessor will automatically apply to all the spring beans' initialization-->
    <bean class="com.demo.drawing.DisplayNameBeanPostProcessor"/>
    <!-- happens before the bean factory(the ApplicationContext in this case) is initialized.-->
    <bean class="com.demo.drawing.MyBeanFactoryPostProcessor"/>
    <!--this will automatically make the properties file seen by this xml-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="pointsconfig.properties"/>
    </bean>
    
    <!--the config for let the context get the message from the properties file, and the value only needs the file name but not the extension-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>mymessages</value>
            </list>
        </property>
    </bean>
    
    <!--<BeanPostProcessor for validate Required annotation
    <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>
    <BeanPostProcessor for validate Autowired annotation once having this, we dont need to add autowire attribute in the corresponding bean>
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->
    <!--this one will include all the above ones-->
    <context:annotation-config/>
    
    <!--To let the spring check the code to see whether there is any bean defined in code,
    e.g. we defined Circle as @Component but not defining bean here then we need this to scan the component-->
    <context:component-scan base-package="com.demo.drawing"/>    
    
    
    
</beans>
